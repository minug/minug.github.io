<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>ios小技巧</title>
      <link href="/2016/10/02/14753087875883/"/>
      <url>/2016/10/02/14753087875883/</url>
      
        <content type="html"><![CDATA[<h1 id="ios小技巧"><a href="#ios小技巧" class="headerlink" title="ios小技巧"></a>ios小技巧</h1><p><strong>1.</strong> 通过runtime的关联对象给对象额外增加实例。<br>关联对象,很聪明的做法就是使用_cmd指针作为key，不用再额外维护一个字符或其他对象。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objc_setAssociatedObject(self, _cmd, value, OBJC_ASSOCIATION_RETAIN);</span><br><span class="line"></span><br><span class="line">objc_getAssociatedObject(self, _cmd)</span><br></pre></td></tr></table></figure><p><strong>2.</strong> JS中实现的消息转发</p><p><strong>3.</strong>关键字typeof()</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__weak typeof(self) weakSelf = self;</span><br></pre></td></tr></table></figure><p><strong>4.</strong>objectForKeyedSubscript:</p><p>实现了这个方法，就能以 a[key] 的形式来取值。</p><p><strong>5.</strong></p><pre><code>#if !__has_feature(objc_arc)#error  does not support Objective-C Automatic Reference Counting (ARC)#endif</code></pre><p>通过这个宏来判断该文件是否支持ARC，如果不支持ARC，则报错。</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS开发相关内容</title>
      <link href="/2016/10/02/14753895285815/"/>
      <url>/2016/10/02/14753895285815/</url>
      
        <content type="html"><![CDATA[<h2 id="iOS开发相关内容"><a href="#iOS开发相关内容" class="headerlink" title="iOS开发相关内容"></a>iOS开发相关内容</h2><h4 id="数据层"><a href="#数据层" class="headerlink" title="数据层"></a>数据层</h4><p>数据库持久化操作<br>fmdb,realm</p><h4 id="UI层"><a href="#UI层" class="headerlink" title="UI层"></a>UI层</h4><p>UITableview中自适应cell高度<a href="14753087034345.md">UITableview中cell自适应高度</a></p><p>轮播图实现,使用UICollectionView或者多个ImageView加上scrollView来展示。</p><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><p>网络访问</p><h4 id="运营维护"><a href="#运营维护" class="headerlink" title="运营维护"></a>运营维护</h4><p>热更新<br>崩溃日志定位</p><h4 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h4><p><a href="14754103000423.md">iOS常见内存泄露错误</a></p><h4 id="ios程序编译与逆向"><a href="#ios程序编译与逆向" class="headerlink" title="ios程序编译与逆向"></a>ios程序编译与逆向</h4><p>编译脚本</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS常见内存泄露错误</title>
      <link href="/2016/10/02/14754103000423/"/>
      <url>/2016/10/02/14754103000423/</url>
      
        <content type="html"><![CDATA[<h4 id="iOS常见内存泄露错误"><a href="#iOS常见内存泄露错误" class="headerlink" title="iOS常见内存泄露错误"></a>iOS常见内存泄露错误</h4><p><strong>常见内存错误</strong><br><strong>1.</strong>memory leak</p><p>一般情况是，在某个方法的中通过new或者alloc，copy，create出一个新的对象之后，没有在该方法的最下方进行release操作。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-(void)func&#123;</span><br><span class="line">    NSObject *obj = [[NSObject alloc] init];</span><br><span class="line">    [obj someMethod];</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.</strong>bad release</p><p>在某个方法的对不是通过new或者alloc，copy，create创建的新对象进行了一次release操作。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-(void)func:(NSObject*)obj&#123;</span><br><span class="line">    [obj someMethod];</span><br><span class="line">    [obj release];</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.</strong>nil argument</p><p>对NSArray或者NSDictionary对象传入一个空指针。在代码中首先创建了一个某类型的空指针，然后在下面的switch或者ifelse中对指针赋值。然后将对象传入一个字典或者数组中。如果没有做default判断，然后将一个nil指针传入array中，造成crash</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-(void)func&#123;</span><br><span class="line">    NSString *s = nil;</span><br><span class="line">    switch Type&#123;</span><br><span class="line">        case 1:</span><br><span class="line">            s = @&quot;&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case 2:</span><br><span class="line">            s = @&quot;&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case 3:</span><br><span class="line">            s = @&quot;&quot;;</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    NSArray *a = @[s];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>UITableview中cell自适应高度</title>
      <link href="/2016/10/01/14753087034345/"/>
      <url>/2016/10/01/14753087034345/</url>
      
        <content type="html"><![CDATA[<h1 id="UITableview中cell自适应高度"><a href="#UITableview中cell自适应高度" class="headerlink" title="UITableview中cell自适应高度"></a>UITableview中cell自适应高度</h1><p>由于UITableview中cell展示时，会先调用其代理方法中的，<strong>- tableView:heightForRowAtIndexPath:</strong> 方法，来确定该cell的高度，然后再调用tableview的datasource方法，来创建展示该cell。对于一些类似聊天界面的tableview，我们不能返回一个固定的高度，需要先根据model里面的数据来计算这个cell的高度。</p><p><strong>第一种做法</strong>是根据data计算cell内视图的frame并手动布局界面。我一般的做法是在<strong>原来model的基础上再添加出一个frameModel层，</strong>作为隔离。因为model层只需要知道其本身内的数据，不需要具体了解具体展示其数据的cell的视图的布局规则。从另一个角度来说，同一个数据可能展示在不同的界面中，可能需要计算的frame也不同，所以不能把这个计算给写死在model层中。</p><p>这么做的优点是，<br><strong>1.</strong>计算量比autolayout要小。由于autolayout的计算是根据界面的布局，屏幕尺寸来进行实时的计算，并将重新排布视图。而我们手动的计算，我们可以添加一个缓存，来确保具体的布局计算只有一次。由于可以减少计算量，所以界面的流畅程度会比autolayout快一点。</p><p>但是缺点也是存在的，<br><strong>1.</strong>由于所有的计算需要我们手动来计算，代码的复杂度明显增加了。更加难维护了。因为需要另外抽出一个frameModel层，需要在这个对象里面手动添加计算的代码。如果需要自定义高度的cell很多的话，代码量上会增加很多。另外，<strong>这个frameModel需要知道cell中具体的视图布局规则，等于与cell直接耦合。如果以后需要修改cell的视图布局，则需要同时修改两处代码。</strong></p><p><strong>2.</strong>手动计算不能很好的支持横竖屏的切换。或者说，在写布局代码的时候，需要分别写入两套计算规则。而自动布局只需要根据界面的比例值来计算即可。</p><p><strong>第二种做法</strong>使用autolayout来自动布局。在ios8的时候，推出了<strong>self-sizing</strong>的概念，即对于例如UILabel，UIButton本身的高度可以根据里面的数据内容来撑开，即会有一个自身的高度存在。因此我们可以根据这个特性，利用autolayout来给cell设置约束，然后给cell传入数据后，让cell来自动布局，然后cell就会被”撑开”，我们就可以直接得到cell被撑开后的height，这个height我们需要在代理中返回的数据。<br>具体可以调用的就是</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FDTemplateLayoutCell框架基于这个概念来实现ios开发中UITableView中cell高度计算。</p><p>简单调用的步骤即，</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</span><br><span class="line">    return [tableView fd_heightForCellWithIdentifier:@&quot;identifer&quot; cacheByIndexPath:indexPath configuration:^(id cell) &#123;</span><br><span class="line">        // 配置 cell 的数据源，和 &quot;cellForRow&quot; 干的事一致，比如：</span><br><span class="line">        cell.entity = self.feedEntities[indexPath.row];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单查看了一下框架中具体实现代码，<br>首先这是一个UITableview的分类，所以可以直接以tableview的形式来调用，而不用创建其他的对象。</p><p>首先根据cell的identifer和runtime来给tableview持有一个cell对象数组。这个cell对象不用于具体的展示，只是用来方便计算cellHeight。</p><p>每当具体调用到代理方法返回高度的时候，我们就可以传入一个identifer得到一个已regist过的cell，然后给cell来传入model数据。<strong>cell得到数据后，我们手动调用其自动布局的方法，得到通过autolayout计算得出的cellheight</strong>。</p><p>这么做的优点就是，在计算的时候不需要手动提前先计算cellHeight，也就不需要frameModel这个对象。代码更加简洁了。但是，每一次滑动tableview的时候，都会调用代理方法，我们需要重新计算一次cellHeight。<strong>而autolayout的计算量又远远大于手动计算</strong>，在流畅度上来说，体验远远差于手动计算。所以FDTemplateLayoutCell又提出了一个缓存的方法。可以根据indexPath或者key来实现数据的高度的缓存，如果第二次传入相同的key时，则直接返回缓存的数据，而不再重新计算。</p><p><strong>key的简单缓存做法即使用mutableDictionary来实现即可。</strong></p><p>讲一下使用indexpath来实现的缓存机制。<br>我们知道，在tableview中，刷新之后，可能原先indexpath对应的model即会出现新的变化，如果近简单的根据indexpath来进行数据缓存，则容易出现错位的情况。</p><p>主要的原理就是，通过分类覆写了UITableview的load方法，在load方法中，通过runtime将tableview的insert，reloadData等方法给hook成自己的方法。然后在替换的方法中手动管理indexpath变量。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ (void)load &#123;</span><br><span class="line">    // All methods that trigger height cache&apos;s invalidation</span><br><span class="line">    SEL selectors[] = &#123;</span><br><span class="line">        @selector(reloadData),</span><br><span class="line">        @selector(insertSections:withRowAnimation:),</span><br><span class="line">        @selector(deleteSections:withRowAnimation:),</span><br><span class="line">        @selector(reloadSections:withRowAnimation:),</span><br><span class="line">        @selector(moveSection:toSection:),</span><br><span class="line">        @selector(insertRowsAtIndexPaths:withRowAnimation:),</span><br><span class="line">        @selector(deleteRowsAtIndexPaths:withRowAnimation:),</span><br><span class="line">        @selector(reloadRowsAtIndexPaths:withRowAnimation:),</span><br><span class="line">        @selector(moveRowAtIndexPath:toIndexPath:)</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    for (NSUInteger index = 0; index &lt; sizeof(selectors) / sizeof(SEL); ++index) &#123;</span><br><span class="line">        SEL originalSelector = selectors[index];</span><br><span class="line">        SEL swizzledSelector = NSSelectorFromString([@&quot;fd_&quot; stringByAppendingString:NSStringFromSelector(originalSelector)]);</span><br><span class="line">        Method originalMethod = class_getInstanceMethod(self, originalSelector);</span><br><span class="line">        Method swizzledMethod = class_getInstanceMethod(self, swizzledSelector);</span><br><span class="line">        method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人意见，在使用FDTemplateLayoutCell的使用确实可以简化我们在不同高度的cell计算。同时，为了避免多次重复的计算，应该开启缓存机制。更好的是通过key来实现缓存。即可以根据model中的各个data生成一个哈希值作为key来缓存height，当data发生变化的时候，其哈希值也会变化，即可以促使tableview来重新计算数据。</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>彩票业务学习与竞品分析</title>
      <link href="/2016/09/21/14743567013398/"/>
      <url>/2016/09/21/14743567013398/</url>
      
        <content type="html"><![CDATA[<h4 id="彩票业务学习与竞品分析"><a href="#彩票业务学习与竞品分析" class="headerlink" title="彩票业务学习与竞品分析"></a>彩票业务学习与竞品分析</h4><p>因为刚开始涉及彩票应用，考虑到目前还没有专门使用过某一彩票应用来买彩票，就当做一个小白用户的初体验吧。<strong>下面所写都是胡说八道，看过即可。</strong></p><p>ps:话说现在购物类的应用图标都是红色。。淘宝，京东，当当，天猫的应用图标都是偏红色色系。。是因为红色能激发购买欲么。。</p><h4 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h4><p>作为彩票类的应用，提供的基础功能就是下单购买彩票。同时彩票又分为各种不同的彩种类型。在天天中彩票应用中，提供了双色球，大乐透，竞彩足球，竞彩篮球等可购买的彩票类型。</p><p>根据应用下方的tabbar，来简单的区分了下应用的提供的主要功能</p><p><img src="/media/14743567013398/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-09-21%20%E4%B8%8A%E5%8D%8810.39.46.png" alt=""></p><ol><li><p>首先是第一个购彩大厅，主要提供的就是购彩的功能，作为各个彩种的购买入口。给不同的彩种提供机选，自选功能，并直接下单购买。</p></li><li><p>其次是开奖公告，主要是用于显示各个彩种近期的中奖号码，简单来说就是一个公布栏的作用。</p></li><li><p>第三是比分直播，为关注足球与篮球的用户提供一个能够直接查看比分实况与赔率的入口。在竞彩足球的部分还提供了评论功能。虽然点了好多场的比赛，其下的点评里面消息数都是零，看见觉得好尴尬。</p></li><li><p>最后一个就是一个账户管理的部分，主要是关于账号，提现，订单查看的功能。</p></li><li>目前应用使用了腾讯的统一的帐号体系，即qq登录与微信登录。</li></ol><h4 id="竞品区别"><a href="#竞品区别" class="headerlink" title="竞品区别"></a>竞品区别</h4><p>选取了同样作为彩票应用的网易彩票与淘宝彩票作为竞品分析。<br><img src="/media/14743567013398/IMG_9312.png" width="70%"></p><p>承接上一个主题，直接从另外两个应用的tabbar分类来入手看看提供的功能有什么不同。</p><h4 id="网易彩票"><a href="#网易彩票" class="headerlink" title="网易彩票"></a>网易彩票</h4><p>网易彩票下方的tabbar有5个，<img src="/media/14743567013398/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-09-21%20%E4%B8%8A%E5%8D%8811.06.52.png" width="60%"></p><p>看的出来，网易彩票主打的方向是旗下的一元购商品。在一元购界面都是各种商品的介绍购买，手机，充值卡，等等不同种类的商品都参与了一元购的抽奖环节。</p><p>不过另一方面，网易彩票传统彩票状态都是暂停销售。所以整个应用提供的主要功能就是用于参与网易的一元购业务。不过感觉网易的一元购好像也有不少用户在参与使用。很多人也应该是被一元购来吸引使用网易彩票app。<br><img src="/media/14743567013398/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-09-21%20%E4%B8%8A%E5%8D%8811.11.23.png" width="40%"></p><p>另外，与天天中彩票应用不同的还有一点就是，网易彩票提供了一个”发现”模块。<br>仔细看了看，在发现模块下，各个不同的圈子中，参与人数与帖子数都不少。而天天中彩票应用的，能够进行消息交互的模块好像就是足球下面的点评，而且还基本没有数据。就是两方面对比，感觉网易彩票靠着圈子功能，即彩票社交类别吧，也是能够吸引不少用户，在圈子中各种交流自己的彩票心得或者用来炫耀。</p><p style="font-size:13px;">莫名想起了家门口的福利彩票小店，总是能见到一堆人聚扎在小店里面研究看看最近的彩票走势，聊聊最近的生活<br></p><br><img src="/media/14743567013398/IMG_9330.png" width="25%"><br><br>#### 淘宝彩票<br><br>而淘宝彩票，则是简单的4个tabbarItem，即为首页，娱乐场，开奖，以及我的界面。<br><br><img src="/media/14743567013398/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-09-21%20%E4%B8%8B%E5%8D%883.02.20.png"><br>简单来看，淘宝彩票也是提供了开奖信息与我的彩票界面。不过其主推的功能，与天天中彩票和淘宝彩票也不相同，是其娱乐场下的一些功能。看的出来，淘宝彩票主要提供的反而不是传统的彩票购买业务，而是基于其自己本身淘金币体系下推出的一系列新的玩法模式。反而更感觉像是一个自营的赌场模式。不过这应该也与政策有关系。<br><br><img src="/media/14743567013398/IMG_9332.png" width="50%"><img src="/media/14743567013398/IMG_9333.png" width="50%"><br><br>简单说一下自己的想法<br>天天中彩票是三个应用中唯一一个可以直接用来购买双色球，大乐透等普通传统彩票的应用。另外可以购买竞彩足球与竞彩篮球。简单猜测一下，应该是唯一一个拿到了彩票从业执照的应用。但是，有点类似一个单纯的彩票购买应用，与网易彩票和淘宝彩票相比，缺少了一点社交的元素。在网易彩票和淘宝彩票中，能够找到应用提供的一块讨论区，可以在里面简单的发送一些类似评论消息，给我的感觉有点更加具有生气。而天天中彩票中，虽然在竞彩足球下提供了一个点评的模块，不过在点进去看到寥寥无几的界面，感觉更是有点气氛尴尬。<br><br>另外网易彩票与淘宝彩票，都是提供了其自己的玩法，例如网易彩票的一元购，淘宝彩票的淘金币娱乐场。玩法比单独的彩票更加丰富一些，也可能更加吸引一下用户吧。<br><br>##### 界面区别<br><br><img src="/media/14743567013398/IMG_9314.png" width="30%"><img src="/media/14743567013398/IMG_9315.png" width="30%"><img src="/media/14743567013398/IMG_9317.png" width="30%"><img src="/media/14743567013398/IMG_9313.png" width="30%"><br>pps:吐槽一下刷新界面<br><p style="font-size:15px;">感觉网易彩票的刷新看起来更舒服一点</p>]]></content>
      
      
      
        <tags>
            
            <tag> 彩票业务 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2016暑期实习总结</title>
      <link href="/2016/09/12/14738707951975/"/>
      <url>/2016/09/12/14738707951975/</url>
      
        <content type="html"><![CDATA[<h3 id="实习总结"><a href="#实习总结" class="headerlink" title="实习总结"></a>实习总结</h3><p>在来电中心度过了两个月的实习期。总结一下实习过程中的一些所感所受与技术上的内容提升。</p><h4 id="关于团队合作"><a href="#关于团队合作" class="headerlink" title="关于团队合作"></a>关于团队合作</h4><p>1，<strong>代码管理工具</strong>，团队主要使用的代码管理工具是SVN，加上分支开发的模式。</p><p>相比较之前使用的git，svn不是分布式的，所以没有本地仓库一说。等于说是大家所有提交的代码都保存在服务器上，需要查看提交记录的话，需要联网查看实时的全部记录，而不是类似git可以现在本地进行提交，然后再统一的push操作。</p><p>另外，对于一些需要忽略的文件，git是通过添加.gitignore文件来实现的，而svn，则是通过一些管理软件来实现的提交文件忽略，例如cornerstone就提供了这个功能。</p><p>svn上开出新的分支，则会将所有的文件拷贝出一份新文件，如果项目较大，并且有较多分支在存在的话，占用的硬盘空间是很可观的。例如tim的svn服务器上大概有5，6个分支和几个release的分支，每个工程大概占用里2G的空间。这些合起来，最后总共占用了接近20个G的空间。其中有相当一部分的文件都是完全一致的。</p><p>2，<strong>关于分支开发</strong>。大的需求开新分支操作，并且会保留一个开关。通过一个变量或者宏来控制新功能的开启与否。<br>或者如果考虑到一些临时性的功能开发，可以使用宏的形式，在后续需要删除的时候可以通过这些宏来快速定位代码位置。</p><p>3，新需求开发的主要流程，需求定制，宣讲，开发，产品体验，测试，合流。</p><p>4，<strong>关于一些开源库的使用</strong>。总的来说还是会在研究过源码的基础上，根据自己项目的一些业务需求进行一些个性化的定制，删除不必要的模块。</p><p>这个可能还是说需要仁者见仁智者见智了。</p><p>将开源库植入自己的应用中，主要原因就是因为需要使用到这个库所提供的功能。如果人手足够的话，抽空根据自己的项目进行一些个性化功能的订制优化，去除一些其他功能，对项目安装包或者性能都会有所帮助。可以直接下载源码后运行。</p><p>不过，如果没有时间进行一些源码级别的优化之类的话，可能使用cocoapods来管理第三方的库比较方便，因为开发者也会对自己的库进行一些优化。</p><p>5，<strong>内存泄露检测</strong>，动态与静态。</p><p>ios中的内存检测，主要还是简单分为了两类，</p><p>一个是动态内存检测，在应用运行过程中，根据控制器来检测。相对于Instruments，在debug环境下，如果产生内存泄露，可以直接弹框说明出现了内存泄露。主要检测原理是，判断依据是，认为当某个控制器被pop之后，其持有的变量与视图应该会被销毁。不过这样也会出现误报的情况。假设我们需要对某个控制器的视图进行缓存的话，就会出现误报的情况。</p><p>二是，通过静态代码扫描来检测。主要判断原理是mrc环境下的代码编写原则，在alloc或者new的下方，则同时应该配有一个release或者autorelease，在retain操作的下方也应该有一个release操作。</p><p>不过当我们编写程序的时候，没有根据这个原则来编写，则也会出现误报的情况。</p><p>扫描出来的问题主要有如下问题，</p><ol><li>bad release，即出现了二次释放，在该方法中的对一个不是通过new，copy，alloc出来的对象进行了release操作，则判断为bad release。</li><li>memory leak，通过alloc或者copy出来的对象在该方法的下方没有release操作。或者在方法中在if语句中提前return，而没有释放之前创建的对象。</li><li>nil parameter。创建了一个指针指向空对象，然后赋值。但是最后没有做边界判断，导致如果需要将这个指针的对象传入一个array或者dict中的话，就会出现传入一个空指针的情况。</li></ol><p>6，<strong>ipv6适配相关</strong>，会出现的问题与解决思路</p><p>7，<strong>安装包裁剪</strong>的主要思路。</p><ol><li>将工程中不需要的图片资源删除。</li><li>然后根据业务逻辑删除一些不再使用的功能。</li><li>重构重复的代码</li><li>将arc文件转换为mrc文件，可以稍微减少一点安装包的增量。</li><li>不要为了一点小功能就引入一个大的开源库。</li></ol><p>9，热修复注意事项。JS-Patch，通过加密算法来实现脚本传输过程中的安全事项。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 实习总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>内存管理的两种实现</title>
      <link href="/2016/08/01/14817252088642/"/>
      <url>/2016/08/01/14817252088642/</url>
      
        <content type="html"><![CDATA[<h4 id="内存管理的两种实现"><a href="#内存管理的两种实现" class="headerlink" title="内存管理的两种实现"></a>内存管理的两种实现</h4><h5 id="通过内存块头部管理引用计数"><a href="#通过内存块头部管理引用计数" class="headerlink" title="通过内存块头部管理引用计数"></a>通过内存块头部管理引用计数</h5><p>将引用计数保存在对象占用的块头部变量中。<br>即实现一个结构体</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct obj_layout &#123;</span><br><span class="line">charpadding[__BIGGEST_ALIGNMENT__ - ((UNP % __BIGGEST_ALIGNMENT__)</span><br><span class="line">  ? (UNP % __BIGGEST_ALIGNMENT__) : __BIGGEST_ALIGNMENT__)];</span><br><span class="line">NSUIntegerretained;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在结构体中保存当前这个变量的引用计数。</p><h5 id="通过计数引用表来实现计数管理"><a href="#通过计数引用表来实现计数管理" class="headerlink" title="通过计数引用表来实现计数管理"></a>通过计数引用表来实现计数管理</h5><p>而通过对Foundation框架的逆向，可以发现苹果的实现是通过计数表来保存每个实例变量的引用计数。</p><p>在计数表中，每个内存对象地址为键值，指向一个计数值。</p><h4 id="两种计数方式的对比："><a href="#两种计数方式的对比：" class="headerlink" title="两种计数方式的对比："></a>两种计数方式的对比：</h4><p>1，通过内存块头部管理引用计数，<br>代码简单，不用维护一个计数表。<br>可以统一管理引用技术的内存与对象的内存块。负责计数的内存块与对象本身的内存块是在一起的。</p><p>2，通过哈希表实现引用计数，<br>在创建分配内存块的时候不需要考虑内存块头部的分配<br>哈希表中有记录各个内存块的地址，可以通过这个追溯到各个具体的实例变量。</p><p>在实际调试的过程中，只要计数表没有被破坏，可以很方便的通过引用计数表来追踪各个对象的计数。<br>同时，统一管理计数的时候，不需要考虑由于单个内存块出现故障，导致该内存对象的计数值丢失的问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>autorelease 的实现</title>
      <link href="/2016/08/01/14817266761435/"/>
      <url>/2016/08/01/14817266761435/</url>
      
        <content type="html"><![CDATA[<h3 id="autorelease-的实现"><a href="#autorelease-的实现" class="headerlink" title="autorelease 的实现"></a>autorelease 的实现</h3><p>调用autorelease 方法速度比较快的原因：<br>在 NSObject 的 initialize方法中，通过<br>static IMP autorelease_imp 来对 NSAutoreleasePool 的 @selector(addObject:) 方法进行了缓存，以后调用不需要通过查找，直接通过该方法指针进行调用即可。</p><p>实际调用结果等同于</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-( id )autorelease&#123;</span><br><span class="line">    [NSAutoreleasePool addObject:self];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 NSAutoreleasePool 内部，具体实现为</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+(id)addObject:(id)obj&#123;</span><br><span class="line">    pool = currentPool();</span><br><span class="line">    [pool addObject:obj];</span><br><span class="line">&#125;</span><br><span class="line">- (void) addObject: (id)anObj&#123;</span><br><span class="line">    [autorelease_array_lisy addObject:anobj];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即在pool内部会维护一个数组，每个被添加到pool内部的对象都会添加到数组中去。</p><p>当pool被调用到 drain方法时，会将pool内所管理的对象进行一个release操作，然后dealloc销毁自身。</p><p>我们可以通过@autoreleasepool{<br>//code<br>}<br>来自己创建并管理一个pool，也可以使用系统维护的autoreleasepool来实现内存的释放。</p><p>而由系统来维护的autoreasepool则会在runtim的运行过程中不断的创建与销毁，来实现内部变量的释放</p><p><a href="http://www.cocoachina.com/ios/20150610/12093.html" target="_blank" rel="noopener">http://www.cocoachina.com/ios/20150610/12093.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS RunLoop</title>
      <link href="/2016/05/10/iOSRunLoop/"/>
      <url>/2016/05/10/iOSRunLoop/</url>
      
        <content type="html"><![CDATA[<h2 id="RunLoop"><a href="#RunLoop" class="headerlink" title="RunLoop"></a>RunLoop</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>runloop用来处理输入各种事项，例如鼠标，键盘事件，NSPort对象，NSConnection 对象，NSTimer对象。所有的触发事件，网络请求，异步回调等等</p><p>开发者不能主动创建或者管理runloop，每个线程会主动创建一个runloop对象，如果需要调用runloop，需要使用currentRunloop获取即可。</p><p>默认是每个线程具有一个runloop，但是不一定会被创建，当调用currentrunloop方法时，如果没有runloop对象，则会自动创建该对象。</p><p>线程和 RunLoop 之间是一一对应的，其关系是保存在一个全局的 Dictionary 里。线程刚创建时并没有 RunLoop，如果你不主动获取，那它一直都不会有。RunLoop 的创建是发生在第一次获取时，RunLoop 的销毁是发生在线程结束时。你只能在一个线程的内部获取其 RunLoop（主线程除外）。</p><p>NSURLConnectionLoader 这个线程内部会使用 RunLoop 来接收底层 socket 的事件，并通过之前添加的 Source0 通知到上层的 Delegate。</p><h3 id="NSRunLoop-线程不安全"><a href="#NSRunLoop-线程不安全" class="headerlink" title="NSRunLoop 线程不安全"></a>NSRunLoop 线程不安全</h3><p>由于nstimer对象并不被认为是input Source，在等待方法回调的时候可能会触发多次调用。</p><p>NSRunloop并不是线程安全的，并且runloop相关的方法，只能在runloop所在线程调用，永远不要再其他线程调用不属于这个线程的方法。<br>不过CFRunloop是线程安全的。</p><h4 id="performSelector"><a href="#performSelector" class="headerlink" title="performSelector"></a>performSelector</h4><p>performSelector 方法包含在Runloop中。</p><p>该方法会创建一个timer对象，然后在合适的runloop模式中，执行传入的方法。所以这个方法，会将传入的参数进行一个retain操作。然后在执行之前就return了。</p><p>PerformSelecter<br>当调用 NSObject 的 performSelecter:afterDelay: 后，实际上其内部会创建一个 Timer 并添加到当前线程的 RunLoop 中。所以如果当前线程没有 RunLoop，则这个方法会失效。</p><p>当调用 performSelector:onThread: 时，实际上其会创建一个 Timer 加到对应的线程去，同样的，如果对应线程没有 RunLoop 该方法也会失效。<br>在该线程的下一次runloop循环中调用</p><h3 id="CFRunLoop-线程安全"><a href="#CFRunLoop-线程安全" class="headerlink" title="CFRunLoop 线程安全"></a>CFRunLoop 线程安全</h3><blockquote><p>runloop中包含的三个对象。</p><blockquote><p>CFRunloopSource </p><p>CFRunloopTimer </p><p>CFRunloopObserver</p></blockquote></blockquote><p>一个 RunLoop 包含若干个 Mode，每个 Mode 又包含若干个 Source/Timer/Observer。每次调用 RunLoop 的主函数时，只能指定其中一个 Mode，这个Mode被称作 CurrentMode。如果需要切换 Mode，只能退出 Loop，再重新指定一个 Mode 进入。这样做主要是为了分隔开不同组的 Source/Timer/Observer，让其互不影响。</p><p>如果一个 mode 中一个 item 都没有，则 RunLoop 会直接退出，不进入循环。</p><p>能够主动为runloop添加观察者，不过需要使用cfrunloop中的API.需要先得到cfrunloop，属于core foundation框架中。<br>core foundation 是用c语言写的一套框架，foundation与cf之间能够通过桥接进行类型转换。cf框架对象中的生命周期不受arc管理，需要开发者自己管理，主动进行retain和release操作。<br>如果你添加了一个port在多种模式下，如果需要移除，则分别从多个模式下独立移除</p><p>如果需要实现回调，需要先创建上述的某一个对象置于runloop中，然后由runloop 在合适的时间进行回调。<br>每个添加到runloop中对象，必须设定好运行的模式。每一个运行中的runloop，都具有特定的模式，同时也只处理对应模式的观察者，定时器和源事件。<br>不过，由于runloop的模式只是简单的一个string类型，所以你可以直接自己定义runloop类型。也可以将你自定义的类型添加到common类型中。</p><p>runloop只有在该模式下，有至少一个源或者定时器去处理，才能运行。<br>sourcees或者timer 能够阻止runloop的退出。</p><p>通过runloop处理事件，循环，维持应用不退出。<br>cfrunloop中提供了管理timer，observer，source的接口<br>runloop本身是递归的，可以在一个runloop里面再添加一个runloop。</p><p>runloop运行事件处理器来响应输入事件，runloop接受两种不同类型的源。Input source ，传递异步事件，一般是来自其余线程或者不同应用的消息。Timer source 传递同步事件，在预定的时间调用或者重复调用。这两种源都使用特定的应用处理来处理事件。<br>Input source 传递同步事件后，会调用runUntilDate方法，去跳出。Timer source传递事件后，不会造成runloop的退出。</p><h4 id="Input-source"><a href="#Input-source" class="headerlink" title="Input source"></a>Input source</h4><p>包含两种source ，Port-based , Custom input source .<br>一般这两个source的处理是不需要做区别的，它们之间唯一的区别就是，Port-baced 由内核创建提出，而custom 由其余线程创建提出。<br>当你创建一个source的时候，你需要将它给与你runloop的某一种模式。模式将决定input source 如何被监视。大多数时候，runloop将处在默认模式下，不过你也可以指定自定义模式。</p><h4 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h4><p>timer并不是真正的时间机制。就像input source，timer只与指定的模式关联。如果不在对应的模式中，timer并不会工作，直到你把模式切换回允许工作的模式。<br>你也可以配置timer只执行一次或者重复地。不过定时器不是真正的定时，如果一个定时器设定在某个时间后，隔5秒执行一次，如果定时器错过了一个或者多次的执行，它会为错过的时间执行一次，然后重新进行隔5秒执行。</p><h4 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h4><p>The entrance to the run loop.<br>When the run loop is about to process a timer.<br>When the run loop is about to process an input source.<br>When the run loop is about to go to sleep.<br>When the run loop has woken up, but before it has processed the event that woke it up.<br>The exit from the run loop.</p><p>Similar to timers, run-loop observers can be used once or repeatedly. A one-shot observer removes itself from the run loop after it fires, while a repeating observer remains attached</p><p>观察者只能在core foundation中创建，而不是cocoa 应用</p><h4 id="Runloop-events"><a href="#Runloop-events" class="headerlink" title="Runloop events"></a>Runloop events</h4><p>Notify observers that the run loop has been entered.</p><p>Notify observers that any ready timers are about to fire.</p><p>Notify observers that any input sources that are not port based are about to fire.</p><p>Fire any non-port-based input sources that are ready to fire.</p><p>If a port-based input source is ready and waiting to fire, process the event immediately. Go to step 9.</p><p>Notify observers that the thread is about to sleep.</p><p>Put the thread to sleep until one of the following events occurs:</p><p>An event arrives for a port-based input source.<br>A timer fires.</p><p>The timeout value set for the run loop expires.</p><p>The run loop is explicitly woken up.</p><p>Notify observers that the thread just woke up.</p><p>Process the pending event.</p><p>If a user-defined timer fired, process the timer event and restart the loop. Go to step 2.</p><p>If an input source fired, deliver the event.</p><p>If the run loop was explicitly woken up but has not yet timed out, restart the loop. Go to step 2.</p><p>Notify observers that the run loop has exited.</p><p><img src="/media/runloopEvents.png" alt="runloop Event"></p><h3 id="Runloop的应用"><a href="#Runloop的应用" class="headerlink" title="Runloop的应用"></a>Runloop的应用</h3><p>1.使用source来与其他线程进行通信</p><p>2.在线程中使用定时器</p><p>3.在应用中使用performSelector方法</p><p>4.保持线程去执行周期任务</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP基础概念笔记</title>
      <link href="/2016/04/21/LearningHTTP/"/>
      <url>/2016/04/21/LearningHTTP/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP简述"><a href="#HTTP简述" class="headerlink" title="HTTP简述"></a>HTTP简述</h1><h3 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h3><p>URI(统一资源标识符) 分为URL(统一资源定位符) 与URN(统一资源名)。</p><p>URL一般分为三个部分</p><ol><li>方案，http:// 即访问资源使用的协议</li><li>服务器所在的Internet地址</li><li>web服务器所在的某个资源</li></ol><p>URN依旧处于实验阶段，现在几乎所有的URI都是URL，所以一般不区分URL与URI</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>通过请求命令与响应结果，客户端获得想要的结果。</p><ol><li>请求方法 GET,POST,PUT,DELETE,HEAD</li><li>状态码 1XX,2XX,3XX,4XX,5XX</li></ol><h3 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h3><p>http报文是由一行一行的简单字符串组成的，而不是二进制数据，所以很方便程序员直接进行读写操作，http报文分为三个部分</p><p>起始行与首部字段都是纯文本类型，但是主体可以包含任何需要的数据，二进制数据或者文本都可以。HTTP 采用了MIME数据格式标签，使得能够传送多媒体内容。</p><ol><li>起始行 请求报文中说明要做什么，响应报文中说明出现了什么情况</li><li>首部字段 键值对的形式</li><li>主体 包含所有需要的数据</li></ol><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>http是应用层协议，不需要考虑网络通信的具体细节。细节都有tcp协议进行处理。使用80端口进行http连接。</p><p>可以使用telnet来连接几乎所有的tcp服务器，包括http。只不过发送的数据需要符合http的格式。用来模拟http客户端</p><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><ol><li>HTTP/0.9 只支持GET方法，只用于获取简单的HTML对象</li><li>HTTP/1.0 添加了版本号，HTTP首部，多媒体等</li><li>HTTP/1.1 重点在于校正HTTP设计中的结构性缺陷，明确语义,添加了基于口令基本认证的方法，得以支持访问控制</li><li>HTTP/2.0 重点在于性能的大幅度提升</li></ol><h3 id="结构组件"><a href="#结构组件" class="headerlink" title="结构组件"></a>结构组件</h3><ol><li>代理 接收所有的请求或响应并转发</li><li>缓存 </li><li>网关 通常用于将http协议与其他协议进行转换</li><li>隧道 </li><li>Agent代理 用户代理，web浏览器，爬虫等</li></ol><h1 id="URL与资源"><a href="#URL与资源" class="headerlink" title="URL与资源"></a>URL与资源</h1><p>URI 是统一资源标识符</p><p>URL通过描述资源位置来标识资源，而URN通过描述资源名字来标识资源</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>URL语法：</p><pre><code>&lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;</code></pre><p>最重要的三个部分，scheme方案 host主机 path路径</p><p>需要说明的是，frag是在客户端部分进行处理的，服务器负责处理全局的对象</p><h2 id="快捷方式"><a href="#快捷方式" class="headerlink" title="快捷方式"></a>快捷方式</h2><p>URL可以分为相对URL和绝对URL。</p><p>使用相对URL需要先设置一个baseURL，使得获取相对定位。在解析时还需要将相对URL解析成为绝对URL。</p><p>浏览器会将浏览过的历史记录下来，在需要的时候进行自动的url扩展，得以自动补全。</p><h2 id="编码机制"><a href="#编码机制" class="headerlink" title="编码机制"></a>编码机制</h2><p>通过编码，进行转义，使得在URL中表示各种不安全的字符。<br>通常使用的转义符号有</p><ul><li>%</li><li>/</li><li>#</li><li>:</li><li>;</li></ul><h2 id="常用方案"><a href="#常用方案" class="headerlink" title="常用方案"></a>常用方案</h2><ul><li>HTTP</li><li>HTTPS</li><li>FTP</li><li>mailto</li><li>file</li><li>news</li><li>telnet</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>URL是通过资源路径来定位资源的，如果服务器将该资源的路径进行了修改，会导致之前的URL失效，无法继续定位</p><h1 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h1><h3 id="HTTP报文流动方向"><a href="#HTTP报文流动方向" class="headerlink" title="HTTP报文流动方向"></a>HTTP报文流动方向</h3><p>报文流入源端服务器，工作完成后，流回Agent代理中<br>所有的报文都是下游流动</p><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><p>HTTP报文由三个部分组成</p><ol><li>对报文进行描述的起始行</li><li>包含属性的首部块</li><li>可选，包含数据的主体</li></ol><table><thead><tr><th></th><th>起始行</th><th>HTTP/1.1 200 OK</th></tr></thead><tbody><tr><td></td><td>首部</td><td>Content-type: text/plain<br>Content-length: 19</td><td></td></tr><tr><td></td><td>主体</td><td>Hi!</td><td></td></tr></tbody></table><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>所有的http报文可以分为两类，一是请求报文，二是响应报文。二者结构相同。</p><h2 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h2><blockquote><p>方法</p><blockquote><p>客户端希望服务器执行的操作,GET,PUT,DELETE,POST,HEAD</p></blockquote></blockquote><blockquote><p>请求URL</p><p>版本</p></blockquote><blockquote><p>状态码</p></blockquote><blockquote><p>原因短语</p></blockquote><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><table><thead><tr><th></th><th>范围</th><th>已定义范围</th><th>分类</th></tr></thead><tbody><tr><td></td><td>100-199</td><td>100-101</td><td>信息提示</td><td></td></tr><tr><td></td><td>200-299</td><td>200-206</td><td>成功</td><td></td></tr><tr><td></td><td>300-399</td><td>300-305</td><td>重定向</td><td></td></tr><tr><td></td><td>400-499</td><td>400-415</td><td>客户端错误</td><td></td></tr><tr><td></td><td>500-599</td><td>500-505</td><td>服务器错误</td><td></td></tr></tbody></table><h2 id="首部"><a href="#首部" class="headerlink" title="首部"></a>首部</h2><p>一些键值对的列表，添加附加信息。</p><h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><blockquote><p>通用首部</p><blockquote><p>可以出现在请求报文和响应报文首部中的。例如Date</p></blockquote></blockquote><blockquote><p>请求首部</p><blockquote><p>提供更多请求信息</p></blockquote></blockquote><blockquote><p>响应首部</p><blockquote><p>提供更多响应内容 </p></blockquote></blockquote><blockquote><p>实体首部</p><blockquote><p>描述主体长度内容，或者资源自身</p></blockquote></blockquote><blockquote><p>扩展首部</p><blockquote><p>规范中没有定义的部分</p></blockquote></blockquote><h2 id="方法详解"><a href="#方法详解" class="headerlink" title="方法详解"></a>方法详解</h2><h3 id="安全方法"><a href="#安全方法" class="headerlink" title="安全方法"></a>安全方法</h3><p>HTTP中定义了一系列安全方法。GET和HEAD被认为是一种安全方法，这意味着使用GET或者HEAD的请求不会产生什么动作。HTTP/1.1 要求服务器必须实现GET与HEAD方法。</p><p>常用方法，GET，POST，HEAD，<br>了解GET与POST之间的区别。</p><p>…</p><h1 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h1><p>HTTP协议是基于TCP连接的。确保连接中数据不会丢失损坏，失序</p><p>HTTPS是在HTTP的基础上添加了一层SSL/TSL封装</p><p>TCP是分组连接，一个发送的数据可能会被分成多个TCP数据包进行分组传送。</p><p>TCP通过4个参数建立唯一通道</p><p>&lt;源地址,源端口,目的地址,目的端口&gt;</p><h3 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h3><p>TCP三次握手<br>socket连接编程</p><p>HTTP基于TCP连接，所以事务上的性能很大一部分取决于底层TCP通道的性能。往往HTTP时延是由tcp网络延时造成的。<br>首先是通过DNS解析网络IP地址，然后建立TCP连接。</p><h2 id="HTTP性能聚焦"><a href="#HTTP性能聚焦" class="headerlink" title="HTTP性能聚焦"></a>HTTP性能聚焦</h2><ul><li>TCP连接建立握手</li><li>TCP慢启动拥塞控制</li><li>数据聚焦Nagle算法</li><li>捎带确认的TCP延迟确认算法</li><li>TIME_WAIT时延和端口耗尽</li></ul><h3 id="TCP连接建立握手"><a href="#TCP连接建立握手" class="headerlink" title="TCP连接建立握手"></a>TCP连接建立握手</h3><p>进行HTTP连接时需要先建立连接，这之间就存在握手时延。如果HTTP本身只传递少量数据的话，建立握手的时延就比较可观了。</p><h3 id="延迟确认"><a href="#延迟确认" class="headerlink" title="延迟确认"></a>延迟确认</h3><p>TCP本身具有丢失重传机制来确保数据能够正确获得。如果发送者没有在指定时间内收到来自接收方的确认帧，则会认为该数据已经丢失，即开始重传。</p><p>大多数TCP采用延迟确认算法，在一定时间内的确认帧会放在缓冲区中，寻找能够携带的输出分组，如果一定时间内没有输出分组，则确认信息放在单独分组中传送。而由于HTTP本身的双峰特征，输出分组并没有很多，所以延迟算法一定程度上造成了时延。</p><h3 id="TCP慢启动"><a href="#TCP慢启动" class="headerlink" title="TCP慢启动"></a>TCP慢启动</h3><p>TCP具有拥塞控制的功能，在一开始建立连接发送数据的时候，会限制本身的最大传送数据量，如果传输成功，则会逐渐提高传输速度。用于方式因特网的突然过载和拥塞。<br>例如先发送一个数据，然后两个，四个，逐步增加。<br>基于这种特性，已经进行过数据交换的连接传输速度比新连接要快一些。</p><h3 id="Nagle算法和TCP-NODELAY"><a href="#Nagle算法和TCP-NODELAY" class="headerlink" title="Nagle算法和TCP_NODELAY"></a>Nagle算法和TCP_NODELAY</h3><p>TCP本身有一个数据流接口，可以传送任意长度的数据。但是每个TCP的首部都有至少40字节的数据，所以如果大量发送少量数据，网络性能会严重下降。</p><p>所以Nagle算法会尽量将多个数据拼接在一起然后一起发送。这就造成了之前的数据会被延迟发送。特别是当剩余数据不足以达到算法的发送低值时，需要等到算法的设定时间后才会被发送。</p><p>可以配置禁用Nagle算法，但是同时应该确保发送的TCP分组中有大量数据。</p><h3 id="TIME-WAIT累积与端口耗尽"><a href="#TIME-WAIT累积与端口耗尽" class="headerlink" title="TIME_WAIT累积与端口耗尽"></a>TIME_WAIT累积与端口耗尽</h3><p>当某个TCP端口关闭TCP连接的时候，会在内存中维护一个小的控制块，确保在一定时间内不会创建相同地址，端口的连接。在性能基准环境下，可能就会成为性能的限制。</p><p>每当客户端连接到80端口后，会获得一个新的端口，以实现连接的唯一性。但是由于可用源端口数量有限，在一定时间内可能会被限制不能再使用，就有可能遇到端口耗尽的问题。</p><p>即使没有端口耗尽的问题，也要考虑，大量连接处在打开状态，或处于等待状态，内存中分配了大量的控制块。会影响系统速度。</p><h2 id="HTTP连接处理"><a href="#HTTP连接处理" class="headerlink" title="HTTP连接处理"></a>HTTP连接处理</h2><h3 id="Connection首部"><a href="#Connection首部" class="headerlink" title="Connection首部"></a>Connection首部</h3><p>###串行事务延时处理<br>如果只对连接进行简单管理，假设一个Web网页嵌入3个图片，则浏览器需要发起多个HTTP请求来显示页面。如果每个请求都串行建立新连接，则连接延时和慢启动就会叠加。</p><p>对此，可以采用并行连接，持久连接，管道化连接的方式处理</p><h3 id="并行连接"><a href="#并行连接" class="headerlink" title="并行连接"></a>并行连接</h3><p>浏览器开启多个TCP连接请求数据，但实际速度不一定更快。打开大量连接会消耗内存资源从而引发自身的性能问题。</p><h3 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h3><p>对于连到同一个站点的连接，浏览器可以通过一个TCP连接获取多个数据，这个方法在HTTP2.0中有所体现。</p><p>但是使用持久连接，需要注意，有可能出现大量空闲连接，消耗性能</p><p>持久连接有两种方案</p><blockquote><p>HTTP/1.0 keep-alive</p><p>HTTP/1.1 persistent</p></blockquote><h4 id="Keep-Alive"><a href="#Keep-Alive" class="headerlink" title="Keep-Alive"></a>Keep-Alive</h4><p>Keep-Alive并不是默认开启的，需要有请求首部来显式要求</p><p>在代理中可能出现问题</p><h4 id="persident"><a href="#persident" class="headerlink" title="persident"></a>persident</h4><p>HTTP/1.1中默认开启</p><h3 id="管道化连接"><a href="#管道化连接" class="headerlink" title="管道化连接"></a>管道化连接</h3><p>在响应到达前，可以先将多个请求放入队列中。可以减少网络环回时间。但是客户端需要做好随时断开连接，处理已发送尚未响应的请求。</p><h2 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h2><h1 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h1><p>Web服务器实现了HTTP和相关的TCP连接处理。负责管理Web服务器提供的资源，以及对Web服务器的配置、控制及扩展管理。</p><h2 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h2><p>处理新的连接，解析出IP地址，将连接加入Web服务器列表中。</p><h2 id="接收请求报文"><a href="#接收请求报文" class="headerlink" title="接收请求报文"></a>接收请求报文</h2><p>解析报文，读取内部控制字段和主体内容。</p><h2 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h2><h2 id="对资源的映射和访问"><a href="#对资源的映射和访问" class="headerlink" title="对资源的映射和访问"></a>对资源的映射和访问</h2><h2 id="构建响应"><a href="#构建响应" class="headerlink" title="构建响应"></a>构建响应</h2><h2 id="发送响应"><a href="#发送响应" class="headerlink" title="发送响应"></a>发送响应</h2><h2 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h2><h2 id="Web代理"><a href="#Web代理" class="headerlink" title="Web代理"></a>Web代理</h2><p>Web代理服务器是网络的中间实体。位于客户端和服务器之间，在各端点间来回传送报文。</p><p>HTTP代理既是客户端又是服务器，需要同时处理请求和响应。</p><p>代理可以看到并接触所有流经的HTTP流量，所以代理可以监视和修改所有流量。</p><p>可以通过代理实现很多功能。</p><h2 id="私有代理和公有代理"><a href="#私有代理和公有代理" class="headerlink" title="私有代理和公有代理"></a>私有代理和公有代理</h2><p>众多客户端共享的代理是公有代理，而私有代理仅被一个客户端使用。</p><h2 id="代理与网关的区别"><a href="#代理与网关的区别" class="headerlink" title="代理与网关的区别"></a>代理与网关的区别</h2><p>代理连接的是两个或者多个使用相同协议的应用程序，而网关连接的则是两个或者多个使用不同协议的端点。网关负责进行协议的转换。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>在客户端中设置代理。</li><li>修改网络</li><li>修改DNS</li><li>修改Web服务器，使用重定向命令。</li></ul><h2 id="URI-代理需要对URI进行处理"><a href="#URI-代理需要对URI进行处理" class="headerlink" title="URI 代理需要对URI进行处理"></a>URI 代理需要对URI进行处理</h2><p>在设置代理的情况下，客户端会发送完整URI。<br>在没有设置的情况下，客户端只会发送部分URI，因为默认接收方已经知晓地址和端口。</p><p>在虚拟主机的配置中，也会出现类似的问题。即缺少方案，缺少主机，缺少端口。</p><p>不过代理是通过显式要求报文中使用完整URI来解决这个问题，而虚拟主机是通过HOST字段来承载主机和端口信息。</p><p>在有不可见拦截代理的时，对主机的解析会有所不同。因为对于客户端而言，是没有代理的，代理需要有很强的健壮性，能够处理各种各样的情况</p><h3 id="报文追踪"><a href="#报文追踪" class="headerlink" title="报文追踪"></a>报文追踪</h3><p>via首部字段可以用来列出报文途中路过的中间节点。请求VIA与对应的响应VIA基本上是相反的，因为二者共用一个TCP连接。</p><p>TRACE 用户可以用来追踪代理链传输的请求报文，观察代理是如何处理报文的</p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>对于同一份文档，多次传输占用了网络带宽，降低传输速度，加重服务器负荷。</p><p>将物理位置上远距离的文件保存在附近的网络服务器中，可以显著降低传输时延。</p><h3 id="命中与未命中"><a href="#命中与未命中" class="headerlink" title="命中与未命中"></a>命中与未命中</h3><h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h4><blockquote></blockquote><p>需要通过HTTP再验证，来保证缓存的新鲜度，即确保缓存的数据与网络上的数据依旧是一致的。可以通过条件首部字段，IF-MODIFIED-SINCE ,来询问服务器该资源在是否在某时间后发生了改变。</p><blockquote></blockquote><p>如果发生改变，则服务器就将新的数据传送回来。</p><blockquote></blockquote><p>如果未改变，服务器返回304状态码，表示NOT Modified</p><blockquote></blockquote><p>如果资源已被删除，返回404 NOT FOUND，缓存也将其副本删除。</p><h4 id="文件本身-ETag"><a href="#文件本身-ETag" class="headerlink" title="文件本身 ETag"></a>文件本身 ETag</h4><p>通过IF-NONE-MATCH</p><p>发送文件的标志ETAG给服务器，来确认是否发生变化</p><h3 id="服务器处理缓存步骤"><a href="#服务器处理缓存步骤" class="headerlink" title="服务器处理缓存步骤"></a>服务器处理缓存步骤</h3><ol><li>接收</li><li>解析</li><li>查询</li><li>新鲜度检测</li><li>创建响应</li><li>发送</li><li>日志</li></ol><h3 id="控制缓存"><a href="#控制缓存" class="headerlink" title="控制缓存"></a>控制缓存</h3><p>通过首部字段Cache-Control可以来控制缓存相关设置。</p><p>no-store<br>在使用完数据后，马上将数据从客户端中删除</p><p>no-cache<br>在获取使用数据后，可以将其缓存，但是每次使用前必须先向服务器验证该缓存的新鲜度。</p><h4 id="关于广告"><a href="#关于广告" class="headerlink" title="关于广告"></a>关于广告</h4><p>广告的点击一般是靠点击量的，缓存的存在，使得点击量会减少。</p><p>此时可能需要由客户端记录点击次数，然后发送给服务端</p><h2 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h2><h3 id="协议网关"><a href="#协议网关" class="headerlink" title="协议网关"></a>协议网关</h3><p>转换来自双方的不同协议，进行不同协议之间的通信。</p><p>常见的如：</p><ul><li>HTTP/FTP</li><li>HTTP/HTTPS</li></ul><h3 id="资源网关"><a href="#资源网关" class="headerlink" title="资源网关"></a>资源网关</h3><p>API就是所谓的通用网关接口。</p><h2 id="隧道"><a href="#隧道" class="headerlink" title="隧道"></a>隧道</h2><p>可以通过HTTP应用程序访问使用非HTTP协议的应用程序。</p><p>Web隧道允许用户通过HTTP连接发送非HTTP流量，在HTTP上捎带其他协议数据。这类流量可以穿过只允许Web流量通过的防火墙。</p><h4 id="使用connect建立HTTP隧道"><a href="#使用connect建立HTTP隧道" class="headerlink" title="使用connect建立HTTP隧道"></a>使用connect建立HTTP隧道</h4><p>CONNECT方法请求隧道网关创建一条到达任意目的的服务器和端口的TCP连接，并对客户端和服务器之间的后继数据进行盲转发。</p><h2 id="中继"><a href="#中继" class="headerlink" title="中继"></a>中继</h2><p>简单HTTP代理</p><h2 id="Web机器人"><a href="#Web机器人" class="headerlink" title="Web机器人"></a>Web机器人</h2><p>在无需人类干预的情况下，自动进行一系列的web事务处理软件。<br>从一个站点进入另一个站点，获取内容，跟踪链接，并对数据进行处理。</p><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><p>从根集出发，开始爬取数据。</p><h2 id="链接提取"><a href="#链接提取" class="headerlink" title="链接提取"></a>链接提取</h2><p>对爬到的HTML进行解析，得到其中的URL，并将链接添加待爬队列中。</p><p>还需要将相对URL转为绝对URL</p><h2 id="避免环路"><a href="#避免环路" class="headerlink" title="避免环路"></a>避免环路</h2><p>避免循环爬取页面的情况出现。</p><p>对已经提取过的网页，爬虫需要记录，来进行查找以避免重复请求。</p><p>需要实现快速搜索。搜索树或者哈希表。</p><h2 id="URL别名"><a href="#URL别名" class="headerlink" title="URL别名"></a>URL别名</h2><p>默认端口，默认页面，IP地址等的存在，使得可能出现多个不同的URL指向同一个页面资源，此时爬虫需要进行区别。</p><p>URL规范化可以在一定程度下解决这个问题</p><h2 id="文件系统环路"><a href="#文件系统环路" class="headerlink" title="文件系统环路"></a>文件系统环路</h2><p>需要爬虫本身实现循环检测机制</p><h3 id="可采取的方案"><a href="#可采取的方案" class="headerlink" title="可采取的方案"></a>可采取的方案</h3><blockquote><p>规范化URL</p><p>广度优先遍历</p><p>节流，限制一段时间内机器人可以从一个站点获取的页面数量</p><p>限制URL大小</p><p>URL站点黑名单 对已知的某些会产生环路，存在陷阱的站点加入黑名单，避开请求</p><p>模式检测 对环路请求的模式特征进行监控</p><p>内容指纹 类似消息摘要</p><p>人工</p></blockquote><h2 id="拒绝机器人访问"><a href="#拒绝机器人访问" class="headerlink" title="拒绝机器人访问"></a>拒绝机器人访问</h2><p>拒绝机器人访问标准，自愿遵守的一个守则，如果存在该守则，则爬虫默认不去爬取页面。进行自我约束。</p><h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h2><h2 id="HTTP-NG"><a href="#HTTP-NG" class="headerlink" title="HTTP-NG"></a>HTTP-NG</h2><p>HTTP/1.1 提供了很多强大的功能，但目前也出现了局限性，复杂，性能，传输依赖。</p><p>Http2协议是一个二进制协议，二进制更易于frame(帧 数据包)的实现，Http2有十个不同frame定义，其中两个最基础的对应于HTTP 1.1的是Data数据和HEADE头部，其后将描述。</p><p>frame是包含几个部分：类型Type, 长度Length, 标记Flags, 流标识Stream和frame payload有效载荷。</p><p>流标识是描述二进制frame的格式，使得每个frame能够基于http2发送，与流标识联系的是一个流，每个流是一个逻辑联系，一个独立的双向的frame存在于客户端和服务器端之间的http2连接中。一个http2连接上可包含多个并发打开的流，这个并发流的数量能够由客户端设置，这些流可能是打散了通过物理连接传输。</p><p>关键之一就是在 应用层(HTTP/2)和传输层(TCP or UDP)之间增加一个二进制分帧层。</p><p>HTTP是一个无状态请求</p><p>但是有时候需要根据用户提供个性化网页，因此需要进行用户识别</p><ul><li>承载用户身份信息的HTTP首部</li><li>客户端IP地址跟踪，通过IP地址识别用户</li><li>用户登录，使用认证的方式</li><li>胖URL，在URL中嵌入识别信息</li><li>cookie</li></ul><h3 id="HTTP首部"><a href="#HTTP首部" class="headerlink" title="HTTP首部"></a>HTTP首部</h3><table><thead><tr><th></th><th>From</th><th>用户E-mail地址</th></tr></thead><tbody><tr><td></td><td>User-Agent</td><td>用户的浏览器软件</td><td></td></tr><tr><td></td><td>Referer</td><td>用户通过这个页面跳转而来</td><td></td></tr><tr><td></td><td>Authorization</td><td>用户名和密码</td><td></td></tr><tr><td></td><td>Client-IP</td><td>客户端IP地址</td><td></td></tr><tr><td></td><td>X-Forwarded-For</td><td>IP地址</td><td></td></tr><tr><td></td><td>Cookie</td><td>服务器产生的ID标签</td><td></td></tr></tbody></table><p>From，User-Agent，Referer都不足以实现可靠的识别。</p><h3 id="客户端IP地址"><a href="#客户端IP地址" class="headerlink" title="客户端IP地址"></a>客户端IP地址</h3><p>利用IP地址来区别用户</p><p>限制：</p><ol><li>IP地址描述的是客户端机器，而不是用户。如果多个用户共用一个机器，此时无法区分</li><li>DHCP动态IP配置，使得每个客户端有可能出现不同的IP地址</li><li>NAT网络地址转换，使得IP地址难以识别</li><li>代理和网关的存在，服务器会看见代理的IP，而不是用户的IP</li></ol><h3 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h3><p>用户主动登录，来判断用户是谁</p><h3 id="胖URL"><a href="#胖URL" class="headerlink" title="胖URL"></a>胖URL</h3><p>利用URL中记录的信息，来区别用户，对URL进行一些扩展，添加一些状态信息。</p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>由服务器为了跟踪，而产生的一段字符串</p><h4 id="会话cookie"><a href="#会话cookie" class="headerlink" title="会话cookie"></a>会话cookie</h4><p>临时使用的，在浏览器退出后就会被删除</p><h4 id="持久cookie"><a href="#持久cookie" class="headerlink" title="持久cookie"></a>持久cookie</h4><p>存储在硬盘上，过期时间比会话cookie长很多。</p><p>会话cookie和持久cookie的唯一区别就是二者的过期时间</p><p>如果设置了Discard，或者没有设置过期时间，则这个就是会话cookie</p><h3 id="cookie设置"><a href="#cookie设置" class="headerlink" title="cookie设置"></a>cookie设置</h3><p>使用set-cookie 首部。</p><p>不同的站点使用不同的cookie,可以通过设置cookie的域属性和路径属性，来使同一站点的访问使用同一cookie<br>domain=”xxx.com”; path=/path1/</p><p>secure 是否只有在SSL连接时才发送这个cookie</p><p>expiration 过期时间</p><p>allh 域内所有主机都获取cookie，还是只有指定了名字的主机获取</p><p>当进行重定向转移的时候，之前cookie依旧会被添加进后续的请求中。</p><h3 id="cookie与缓存"><a href="#cookie与缓存" class="headerlink" title="cookie与缓存"></a>cookie与缓存</h3><p>在使用cookie的时候，需要注意这些内容可能是用户个人定制的，在某些时候，应该禁止浏览器缓存相关的数据。</p><h2 id="HTTP基本认证"><a href="#HTTP基本认证" class="headerlink" title="HTTP基本认证"></a>HTTP基本认证</h2><p>HTTP原生提供了一种认证机制。</p><p>服务器返回401状态码，表示该需要通过认证才能访问</p><p>通过AUTHENTICATE 首部字段，来进行验证</p><p>使用时，可以通过BASE4编码，来混淆账号密码。</p><p>WWW-AUTHENTICATE中包含了realm域信息，来明确需要访问的是哪个安全域。</p><p>这种验证，因为并不是加密验证，其实也是一种明文的信息进行了数据传输，容易被中间人获取。并不安全</p><h2 id="摘要认证"><a href="#摘要认证" class="headerlink" title="摘要认证"></a>摘要认证</h2><p>摘要认证避免明文在网络上传输</p><p>可以有选择的防止对报文内容的篡改</p><p>防止恶意用户捕获并重放认证的握手过程</p><p>MD5对密码进行摘要，然后传输</p><p>服务器可以添加一个随机数给客户端，将随机数附在密码后面进行加密。可以有效防止将摘要记录后作为重放进行验证。</p><h2 id="安全HTTP"><a href="#安全HTTP" class="headerlink" title="安全HTTP"></a>安全HTTP</h2><p>HTTPS</p><p>使用SSL或者TLS， 传输层级别的密码安全层</p><p>HTTPS先将未加密的报文发给安全层，由其进行数据加密，然后再发送。</p><p>一般来说，加密过程对于HTTPS的应用层是隐藏的，应用只需处理自己业务逻辑即可。</p><p>HTTPS使用443端口</p><p>https 三次握手。SSL交换密钥<br>端口443 。https就是在http的基础上添加了ssl加密协议，利用密钥交换协议进行了密钥交换<br>验证CA证书。<br>具体分析。。。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.freebuf.com/articles/system/37900.html</span><br></pre></td></tr></table></figure><h2 id="HTTPS代理"><a href="#HTTPS代理" class="headerlink" title="HTTPS代理"></a>HTTPS代理</h2><p>对于代理而言，一旦HTTP数据加密，代理就看不到相关的HTTP头信息，无法进行数据的转发。</p><p>一般此时，需要客户端提前将端口与地址等告知代理。以明文的形式</p><p>之后建立隧道，直接以隧道的模式进行交流</p>]]></content>
      
      
      
        <tags>
            
            <tag> Net </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>腾讯即通产品部 iOS面试</title>
      <link href="/2016/04/17/4_17_Tecent/"/>
      <url>/2016/04/17/4_17_Tecent/</url>
      
        <content type="html"><![CDATA[<h3 id="2016-4-17-Tecent-iOS面试"><a href="#2016-4-17-Tecent-iOS面试" class="headerlink" title="2016.4.17_Tecent iOS面试"></a>2016.4.17_Tecent iOS面试</h3><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><ol><li>TCP与UDP的区别</li><li>TCP握手</li><li>HTTP首部</li></ol><h4 id="IOS相关"><a href="#IOS相关" class="headerlink" title="IOS相关"></a>IOS相关</h4><ol start="4"><li>GCD介绍，多线程解决方案与进程通信相关</li><li>ARC解释</li></ol><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><ol start="6"><li>数据库范式</li><li>手写数据库注入范例</li><li>数据库防止注入方案</li></ol><h4 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h4><ol start="9"><li>DES加密</li></ol><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><ol start="10"><li>C++变量声明周期</li></ol><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ol start="11"><li>手写链表结构与增删改查操作</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网易春招实习面试</title>
      <link href="/2016/04/01/%E7%BD%91%E6%98%93%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
      <url>/2016/04/01/%E7%BD%91%E6%98%93%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="http缓存"><a href="#http缓存" class="headerlink" title="http缓存"></a>http缓存</h2><p>304状态码 Not Modify</p><p>通过http协议头进行缓存控制，cache-control。</p><p>服务器会返回设置相关的缓存控制信息，例如缓存时间max-age，缓存内容标记tag，控制是否缓存等信息。</p><p>if-None-Match 中有ETag令牌，由服务器检查是否资源被修改。如果未改变，由服务器返回304 Not Modify 状态码。目标是尽可能减少向服务器的数据请求，减少带宽压力。</p><p>使用一致的网址：如果您在不同的网址上提供相同的内容，将会多次获取和存储该内容。提示：注意，网址区分大小写！</p><p>确保服务器提供验证令牌 (ETag)：通过验证令牌，如果服务器上的资源未被更改，就不必传输相同的字节。</p><p>确定中继缓存可以缓存哪些资源：对所有用户的响应完全相同的资源很适合由 CDN 或其他中继缓存进行缓存。</p><p>确定每个资源的最优缓存周期：不同的资源可能有不同的更新要求。审查并确定每个资源适合的 max-age。</p><p>确定网站的最佳缓存层级：对 HTML 文档组合使用包含内容指纹码的资源网址以及短时间或 no-cache 的生命周期，可以控制客户端获取更新的速度。</p><p>搅动最小化：有些资源的更新比其他资源频繁。如果资源的特定部分（例如 JavaScript 函数或一组 CSS 样式）会经常更新，应考虑将其代码作为单独的文件提供。这样，每次获取更新时，剩余内容（例如不会频繁更新的库代码）可以从缓存中获取，确保下载的内容量最少。</p><p><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-cn" target="_blank" rel="noopener">https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-cn</a><br><a href="http://www.cnblogs.com/TankXiao/archive/2012/11/28/2793365.html#noverify" target="_blank" rel="noopener">http://www.cnblogs.com/TankXiao/archive/2012/11/28/2793365.html#noverify</a></p><p>http Cookie <a href="http://www.cnblogs.com/fish-li/archive/2011/07/03/2096903.html" target="_blank" rel="noopener">http://www.cnblogs.com/fish-li/archive/2011/07/03/2096903.html</a></p><h3 id="https-三次握手。SSL交换密钥"><a href="#https-三次握手。SSL交换密钥" class="headerlink" title="https 三次握手。SSL交换密钥"></a>https 三次握手。SSL交换密钥</h3><p>端口443 。https就是在http的基础上添加了ssl加密协议，利用密钥交换协议进行了密钥交换<br>具体分析。。。<br>验证CA证书。<br><a href="http://www.freebuf.com/articles/system/37900.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/system/37900.html</a></p><h3 id="http2-0"><a href="#http2-0" class="headerlink" title="http2.0"></a>http2.0</h3><h3 id="http代理"><a href="#http代理" class="headerlink" title="http代理"></a>http代理</h3><p>HTTP的代理服务器即是Web服务器又是Web客户端。<br><a href="http://www.cnblogs.com/TankXiao/archive/2012/12/12/2794160.html" target="_blank" rel="noopener">http://www.cnblogs.com/TankXiao/archive/2012/12/12/2794160.html</a></p><p>HTTP协议是无状态的，对于一个浏览器发出的多次请求，WEB服务器无法区分 是不是来源于同一个浏览器。 因此需要cookie的实现。<br>cookie与session的区别。<br>http Cookie的实现，字符串保存于浏览器中<br>可以利用cookie保存少量数据，使用数据序列化分方式。<br>session是基于cookie实现的。<br>cookie安全。</p><h3 id="libcap抓包原理"><a href="#libcap抓包原理" class="headerlink" title="libcap抓包原理"></a>libcap抓包原理</h3><p>libpcap的包捕获机制就是在数据链路层加一个旁路处理。当一个数据包到达网络接口时，libpcap首先利用已经创建的Socket从链路层驱动程序中获得该数据包的拷贝，再通过Tap函数将数据包发给BPF过滤器。BPF过滤器根据用户已经定义好的过滤规则对数据包进行逐一匹配，匹配成功则放入内核缓冲区，并传递给用户缓冲区，匹配失败则直接丢弃。如果没有设置过滤规则，所有数据包都将放入内核缓冲区，并传递给用户层缓冲区。<br>其实pcap的应用程序格式很简单，总的来说可以可以分为以下5部分：<br>1.我们从决定用哪一个接口进行嗅探开始。在Linux中，这可能是eth0，而在BSD系统中则可能是xl1等等。我们也可以用一个字符串来定义这个设备，或者采用pcap提供的接口名来工作。<br>2.初始化pcap。在这里我们要告诉pcap对什么设备进行嗅探。假如愿意的话，我们还可以嗅探多个设备。怎样区分它们呢？使用 文件句柄。就像打开一个文件进行读写一样，必须命名我们的嗅探“会话”，以此使它们各自区别开来。<br>3.假如我们只想嗅探特定的传输（如TCP/IP包，发往端口23的包等等），我们必须创建一个规则集合，编译并且使用它。这个过程分为三个相互紧密关联的阶段。规则集合被置于一个字符串内，并且被转换成能被pcap读的格式(因此编译它)。编译实际上就是在我们的程序里调用一个不被外部程序使用的函数。接下来我们要告诉 pcap使用它来过滤出我们想要的那一个会话。<br>4.最后，我们告诉pcap进入它的主体执行循环。在这个阶段内pcap一直工作到它接收了所有我们想要的包为止。每当它收到一个包就调用另一个已经定义好的函数，这个函数可以做我们想要的任何工作，它可以剖析所部获的包并给用户打印出结果，它可以将结果保存为一个文件，或者什么也不作。<br>5.在嗅探到所需的数据后，我们要关闭会话并结束。<br><a href="http://blog.csdn.net/stoneliul/article/details/8615105" target="_blank" rel="noopener">http://blog.csdn.net/stoneliul/article/details/8615105</a></p><h3 id="git分支操作"><a href="#git分支操作" class="headerlink" title="git分支操作"></a>git分支操作</h3><p>$ git branch xxx<br>$ git checkout xxx</p><h3 id="runtime底层实现。"><a href="#runtime底层实现。" class="headerlink" title="runtime底层实现。"></a>runtime底层实现。</h3><p>runtime相关，运行时的所有类，对象。<br>关于变量，属性，协议，方法，消息转发等<br>消息的返回类型，参量类型<br>运行时，工程加载的所有二进制库或者framework等等<br>能够动态修改指针的强弱<br>可以通过runtime创建不是继承于NSObject 的OC 根对象</p><h2 id="手机端网络分层对应情况"><a href="#手机端网络分层对应情况" class="headerlink" title="手机端网络分层对应情况"></a>手机端网络分层对应情况</h2><h2 id="arc底层机制，即C实现原理。c的内存管理实现。"><a href="#arc底层机制，即C实现原理。c的内存管理实现。" class="headerlink" title="arc底层机制，即C实现原理。c的内存管理实现。"></a>arc底层机制，即C实现原理。c的内存管理实现。</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OSI</title>
      <link href="/2016/03/21/tcpip/"/>
      <url>/2016/03/21/tcpip/</url>
      
        <content type="html"><![CDATA[<h1 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h1><h4 id="OSI参考模型网络层、子层和层分组"><a href="#OSI参考模型网络层、子层和层分组" class="headerlink" title="OSI参考模型网络层、子层和层分组"></a>OSI参考模型网络层、子层和层分组</h4><p>第一层是最具体的，处理了实际的网络硬件和从一台设备到另一台设备发送比特的特定方法。第二层处理的依旧是信令和硬件。随着到了第3，4层，变得越来越抽象，等到了应用层，就不再处理硬件或者操作系统的概念了。</p><h4 id="PDU和SDU"><a href="#PDU和SDU" class="headerlink" title="PDU和SDU"></a>PDU和SDU</h4><p>PDU，协议数据单元</p><p>SDU，服务数据单元</p><p>每个协议会生成一个供传输的PDU，该数据就是下一层的SDU。</p><p>PDU就是上层协议内容，加上本层的协议头。</p><h3 id="中间设备"><a href="#中间设备" class="headerlink" title="中间设备"></a>中间设备</h3><p>中间设备在物理层接受报文，然后报文被上传到数据链路层，在这里被处理，检错等，且数据链路层的首部被剥去，处理后的分组被向上传递到网络层。在那里，网络层判断目的机器是不是在本地网络上，或分组是否需要被转发到另一个中间设备。然后被重新打包成报文，向下返回到数据链路层，等待继续发送</p><p>报文沿着OSI模型向上只到网络层，然后重新被打包，沿着线路在物理层发送。</p><h1 id="OSI层次作用"><a href="#OSI层次作用" class="headerlink" title="OSI层次作用"></a>OSI层次作用</h1><blockquote><p>应用层</p><p>表示层</p><p>会话层</p><p>运输层</p><p>网络层</p><p>数据链路层</p><p>物理层</p></blockquote><h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><p>唯一的数据通过网络接口物理移动的层次。所以其他层执行生成报文的功能，这些报文实现各种协议。但是最终，报文必须沿着协议栈向下运输到物理层，并最终通过网络发送出去。</p><h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><p>数据链路层在概念上分为两个子层，逻辑链路层LLC和媒体访问层MAC。</p><h4 id="LLC"><a href="#LLC" class="headerlink" title="LLC"></a>LLC</h4><p>网络上本地设备之间逻辑链路的建立和控制所需要的功能。</p><h4 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h4><p>控制对网络媒体访问的程序。</p><h4 id="数据成帧"><a href="#数据成帧" class="headerlink" title="数据成帧"></a>数据成帧</h4><p>将较高层次的报文最终封装成可以在网络物理层发送的帧。</p><h4 id="寻址"><a href="#寻址" class="headerlink" title="寻址"></a>寻址</h4><p>实现对MAC地址的寻址。</p><h4 id="差错检测与处理"><a href="#差错检测与处理" class="headerlink" title="差错检测与处理"></a>差错检测与处理</h4><h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>网络层参与从一台计算机到另一台计算机实际获取数据的最底层。一般而言，数据链路层只处理彼此相邻的本地设备。</p><h4 id="逻辑寻址"><a href="#逻辑寻址" class="headerlink" title="逻辑寻址"></a>逻辑寻址</h4><p>IP协议，尽可能为每一个设备分配一个唯一的逻辑地址。在逻辑层次的寻址；数据链路层是针对物理层的寻址。</p><h4 id="数据报封装"><a href="#数据报封装" class="headerlink" title="数据报封装"></a>数据报封装</h4><h4 id="分片与重组"><a href="#分片与重组" class="headerlink" title="分片与重组"></a>分片与重组</h4><p>如果需要发送的数据太大超过了数据链路层的最大限制，网络层需要将数据划分成片，并把每片交给数据链路层。</p><h4 id="差错处理和诊断"><a href="#差错处理和诊断" class="headerlink" title="差错处理和诊断"></a>差错处理和诊断</h4><p>针对网络层的差错处理和检错</p><h3 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h3><p>运输层担当较高层的应用的抽象领域和1-3层具体功能的联络者。</p><p>主要负责端对端的运输。</p><h4 id="进程级寻址"><a href="#进程级寻址" class="headerlink" title="进程级寻址"></a>进程级寻址</h4><p>对端口级别的寻址，寻址需要发送到对方的某个应用程序。</p><h4 id="多路复用和分解"><a href="#多路复用和分解" class="headerlink" title="多路复用和分解"></a>多路复用和分解</h4><h4 id="分片，打包和重组"><a href="#分片，打包和重组" class="headerlink" title="分片，打包和重组"></a>分片，打包和重组</h4><p>对较大报文的分片</p><h4 id="连接建立，管理和终止"><a href="#连接建立，管理和终止" class="headerlink" title="连接建立，管理和终止"></a>连接建立，管理和终止</h4><h4 id="确认和重传"><a href="#确认和重传" class="headerlink" title="确认和重传"></a>确认和重传</h4><p>运输层是实现可靠数据交付协议的地方。最通常的做法就是通过结合确认和重传定时器来实现。</p><h4 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h4><h1 id="TCP-IP各层次常用协议"><a href="#TCP-IP各层次常用协议" class="headerlink" title="TCP/IP各层次常用协议"></a>TCP/IP各层次常用协议</h1><table><thead><tr><th>网络接口层</th><th>点到点协议</th><th>PPP</th><th>提供第二层连接。提供鉴别，数据封装，加密和聚合等功能</th></tr></thead><tbody><tr><td></td><td>地址解析协议</td><td>ARP</td><td>将IP地址转换为MAC地址</td></tr><tr><td><strong>网际层</strong></td><td>网际协议</td><td>IP，IPV6</td><td>提供对运输层报文的封装，无连接交付，寻址和选路功能</td></tr><tr><td></td><td>IP网络地址转换</td><td>IP NAT</td><td>将专用网络中的地址自动转换成公用网络中的不同地址</td></tr><tr><td></td><td>互联网控制报文</td><td>ICMP</td><td>IP和IPV6协议的支持协议。一般用于ping命令</td></tr><tr><td><strong>运输层</strong></td><td>传输控制协议</td><td>TCP</td><td>提供可靠连接的协议，具有流量控制功能</td></tr><tr><td></td><td>用户数据报协议</td><td>UDP</td><td>提供无连接协议，效率较高</td></tr><tr><td><strong>应用层</strong></td><td>域名系统</td><td>DNS</td><td>将域名转换为IP地址</td></tr><tr><td></td><td>动态主机配置协议</td><td>DHCP</td><td>用来配置TCP/IP设备并管理IP地址的协议</td></tr><tr><td></td><td>文件传输协议</td><td>FTP</td><td>文件传输，明文形式传送用户名和密码</td></tr><tr><td></td><td>超文本传输协议</td><td>HTTP</td><td></td></tr><tr><td></td><td>TELNET协议</td><td>Telnet</td><td>建立远程机器的终端会话</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Net </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
